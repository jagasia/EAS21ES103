JDBC:
	in the 1 example we have seen,
	
	Statement st=con.createStatement();
	ResultSet rs=st.executeQuery("SELECT * FROM EMPLOYEES");
	while(rs.next())
	{
		System.out.println(rs.getString(1));//		1 is the column number.
	}


Let's take this statement:
	Statement st=con.createStatement();

There are 3 types of statements:
	i) Statement		interface
	ii) PreparedStatement 	interface
	iii) CallableStatement	interface

When to use which type of statement?
	i) Whenever we execute a simple query.
		it can be SELECT, INSERT, UPDATE, DELETE, anything......
		but what is a simple query?????
			A simple query does not depend on inputs at runtime

		INSERT INTO COUNTRIES VALUES(1,'India',12121212121212)

			tHIS is a simple query because, it does not depend on input

		int id=2;
		String name="Australia";
		Long population=89898989;	
		
		String sql="INSERT INTO COUNTRIES VALUES(id,name,population)";		
		String sql="INSERT INTO COUNTRIES VALUES("+id+",'"+name+"',"+population+")";

		****************** the above also a simple query **************************


	ii) String sql="INSERT INTO COUNTRIES VALUES (?,?,?)";
		//the above is not a simple query
		//it is a parameterized query

		we should use PreparedStatement now


		String sql="SELECT * FROM COUNTRIES WHERE id=?";		//this is also a parameterized query

		I STRONGLY RECOMMEND YOU TO USE "PREPARED STATEMENTS" in your project whenever conditions or 			parameters are there

		String sql="INSERT INTO COUNTRIES VALUES("+id+",'"+name+"',"+population+")";
		//the above is STRONGLE DISCOURAGED APPROACH. DO NOT DO THIS

		Why?
			i) you can append String + number + Date+ any scalar values
				but how would you append a picture???		audio???	video???
			
			so use prepared statement

			ii) string append technique is prone to SQL injection
				but PreparedStatements does not allow sql injection, because, it will consider entire value as username or password (for example) and does not allow syntax to be affected or commented out

		

CREATE TABLE USER_MASTER
(
USERNAME VARCHAR2(20) PRIMARY KEY,
PASSWORD VARCHAR2(20) NOT NULL
);


username=			i dont know' or 1=1 --
password=			i dont care
"SELECT * FROM USER_MASTER WHERE USERNAME='"+username+"' AND PASSWORD='"+password+"'"

SELECT * FROM USER_MASTER WHERE USERNAME='i dont know' or 1=1 --' AND PASSWORD='i dont care'


		iii)
			so far, we have seen,
				Statement for simple query
				PreparedStatement for parameterized query
			now
			CallableStatement
				to call stored procedures and functions present in the database
				do not confuse, predefine functions, here
				Functions and Procedures are PLSQL programs created in the database

--------------------------------------
Statement
PreparedStatement
CallableStatement

now,
	coming into execute methods

	void execute()		used for executing any query	DML, DDL, DQL etc	but we dont get return value
	ResultSet executeQuery() is used for "SELECT QUERY" only	returns result set
	int executeUpdate()	used for INSERT, UPDATE, DELETE		returns number of rows affected




1) create a java program that will accept input from the user and stores a record in the table
2) create a java program that accepts input from the user and updates (a) record(s) in the table
3) create a java program that gets id as input and removes that row from the table


Date formats:
	oracle 	dd-MMM-yy		(but in application express, 		MM/dd/yyyy)
	mysql	yyyy-MM-dd		(this is almost universal format)		HTML5


Date is a class in java.util package
	while converting String into Date
		sdf.parse(str);
	while converting Date into String
		sdf.format(dt);

the Date object itself do not have any specific format. 
It is an object
	it has members like month, year, hour, etc

while displaying a date object
	System.out.println(dt);			here, dt.toString() is called. it will display in lengthy format
						it does not mean that Date object has date in that format
while sending date to oracle database,
	remember we are sending String in a specific format 	dd-MMM-yy that is converted into date

	

In java projects, we follow some pattern
	DAO pattern		Data Access Objects

If we need to access a table called "COUNTRIES"
then what are the steps to follow:		in future, if i tell you the table name, you should be able to do:

1) Country.java			is called as Entity class		means, it is mapped to a Table
		public class Country{}

	inside this class, there should be properites: 	countryId, countryName, regionId

2) CountryDao.java
		public interface CountryDao
	
	inside this interface, declare all the methods related to database access
	(we will do reverse engineering. ie., create implementation class and then generate interface from that)

3) CountryDaoImp.java
		public class CountryDaoImpl implements CountryDao

	


E-R diagram
	Entity Relationship Diagram

		here every or regular entity becomes a Table in database. And class in java program
		that is why it is called as Entity class


-------------------------------------------------------
Statement
PreparedStatement
CallableStatement

	what is this callable statement?
		this is used to call
			stored procedures 
			stored functions

	PROCEDURES and FUNCTIONS are PL/SQL programs		PL/SQL stands for?
			PROCEDURAL LANGUAGE EXTENSION TO SQL

	

CREATE OR REPLACE PROCEDURE PRC1(EID INT, FNAME OUT VARCHAR2, SAL OUT INT)
AS
BEGIN
 SELECT FIRST_NAME, SALARY INTO FNAME, SAL 
 FROM EMPLOYEES WHERE EMPLOYEE_ID=EID;
END;





a procedure in oracle is similar to void method in java

void display();		//this method does not return a value
similarly, a procedure does not have return type. But it can have OUTPUT parameters that return values

The above procedure can be called from a plsql block like:

declare
 eid int:=104;
 fname varchar2(20);
 sal int;
begin
 PRC1(eid, fname, sal);
 dbms_output.put_line(fname);
 dbms_output.put_line(sal);
end;


NOW, how to call this procedure from a JDBC program?
	hint: use Callable Statement



import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.Driver;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.SQLType;
import java.sql.Types;

public class App {

	public static void main(String[] args) throws SQLException {
		int eid=111;
		String fname="";
		int sal=0;
		Driver driver=new oracle.jdbc.driver.OracleDriver();
		Connection con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","hr","hr");
		CallableStatement st = con.prepareCall("{ call PRC1(?,?,?)}");
		st.setInt(1, eid);
		st.registerOutParameter(2, Types.VARCHAR);
		st.registerOutParameter(3, Types.INTEGER);
		st.execute();
		
		System.out.println(st.getString(2));
		System.out.println(st.getInt(3));
	}

}


--------------------------------
How to call a stored function?


	con.prepareCall("{ ?= call FN1(?,?)}");
	//first parameter is output
	

----------example

CREATE FUNCTION mul(a int, b int) RETURNS INT
BEGIN
DECLARE c INT;
SET c = a*b;
RETURN c;
END;




import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Types;

class JDBC_Function_Example {

    public static void main(String[] args) throws Exception {
        Connection connection = null;
        Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
        connection = DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/onlinetutorialspoint", "root",
                "123456");
        CallableStatement cStmt = connection.prepareCall("{?=call mul(?,?)}");

        cStmt.registerOutParameter(1, Types.INTEGER);
        cStmt.setInt(2, 20);
        cStmt.setInt(3, 60);
        cStmt.execute();
        System.out.println("The Multiplication is : " + cStmt.getInt(1));
        cStmt.close();
    }
}
