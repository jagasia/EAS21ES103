1) Java Learning
2) Java Hands on
3) Oracle exam preparation (tomorrow, tuesday, exam for oracle) Multiple choice exam in Tekstac platform

-------------------------------------------
Java Date
----------
In Java 8, what are the date options we have?
	java.util.Date
	java.sql.Date
	java.time.LocalDate


Date is a class in util package:
	Date dt=new Date();	
		by default what is the date stored in this object?
			it will store the system date and time.
		Which system?
			in which system it is running, that system date.

		Every date is actually a number		long data type number
		that number keeps increasing every millisecond
		From when?		1970
			Thu Jan 01 05:30:00 IST 1970


How to convert java.util.Date into sql.Date
	java.sql.Date dt1=new java.sql.Date(dt.getTime());
		

LocalDate:
	is introduced in java 8 version
we can do arithmetic on dates easily like
	finding the age of a person
	

		String str="1999-01-01";
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
		Date dob1=sdf.parse(str);
		java.sql.Date dob2=new java.sql.Date(dob1.getTime());
		LocalDate dob3 = dob2.toLocalDate();
		
		LocalDate today=LocalDate.now();
		
		System.out.println(dob3);
		System.out.println(today);
		Period result = Period.between(dob3, today);
		System.out.printf("You are %d Years, %d Months and %d days old",result.getYears(),result.getMonths(),result.getDays());


Date
	getTime
	setTime
long number respresenting every millisecond as a long value

Calendar
	GregorianCalendar
		
GregorianCalendar gc=new GregorianCalendar();
		System.out.println(gc.isLeapYear(2024));


SimpleDateFormat
	parse()			converts String into java.util.Date
	format			converst java.util.Date to String

Scanner
	next()				only till the delimiter like SPACE, TAB, NEWLINE
			ideally useful for only one word 
	next().charAt(0)		to get one character as input
	nextLine()			to get input till a new line is found
	nextInt()
	nextFloat()			all these will accept till any delimiter is found	SPACE/TAB/NEWLINE

-----------------------------------------------
Process
	Notepad is a program.
	when i run this program, 7 times, at a time, 
	i can see 7 instances in the "Processes" tab of Task Manager.

	Process is a running instance of a program.

	Process contains one or more Threads

Any program you run, (has a main method), then the main method becomes a flow of execution.
	only from main, we branch to other methods.

	Any program, running, has a main thread.

	so far, we have executed many programs, then there was main thread inside those processes

There is no process without a main thread

so far we have created single threaded processes

if we add child threads, which can be started from main thread, then we are creating 
	multi threaded processes


MS Word
	as we are typing, there is 
		auto completion
		auto correction
		word wrap
		spell check utilization

	Threads running inside the process

Resourse
	time and memory

	3 GHz		1/time		3*1024*1024*1024

	For effective utilization of cpu,
		it is better that a process can have more than 1 thread

	bcos, threads do not require separate resource allocation 
	they share the resources allocated for the process

1 thread in a process
	0%
2 threads in a process
	50%
3 threads in a process
	66%
4 threads in a process
	75%


optimal usage of threads is considered


Thread is a class
Runnable interface

a class that implements Runnable interface and override the run() method can be used as a Thread

a class that extends Thread and overrides run() method, is a Thread

Thread


Runnable is a functional interface ie., this interface has only 1 abstract method called run() method

what is a functional interface?
	an interface that has only 1 abstract method is a functional interface

we can implement it using lambda


-------------------------
Usually, a program runs in a synchronous mode.
ie., if we call 2 methods like:

	method1();
	method2();

then only after the completion of method1, the next method ie., method2 will start.

But if we call these 2 methods using 2 different threads, 
then even before method1 completes, the method2 starts parallely

that is called asynchronous execution

ie., both threads run independantly

but some times, we need to coordinate the threads. Hence synchronization is required.

When we roam inside an airport, everybody is independant. 
But when we enter the security check gate, only 1 by 1 is allowed

like that threads are asynchronous but when they access a shared resource, at a time, then inconsistency risk is there

variable x

is accessed by many threads at a time

1
2
3
4

4+1	=	5

if two threads do this at a time

one updation might go missing

synchronization is required

1) join()
	this method ensures that all the started threads can continue. 
	but the threads that are not yet started, will wait for the running threads to complete



T1 t1=new T1();
		T2 t2=new T2();
		Thread t3=new Thread(new T3());
		Thread t4=new Thread(new T4());
		
		t1.start();
		t2.start();
		t2.join();		//already started thread, t1 & t2 are continuing. until they finish, t3 & t4 						do not start
		t3.start();
		t4.start();
		

it is upto where we are using join()

-----------------------------------
Lets understand 
	synchronization blocks
	synchonization methods

synchonized block
	is a block of code that can allow only 1 thread to enter the block. 
	until the entered thread, exits the block, other threads are not allowed to enter the block


sync happens only if multiple threads try to access same object
	in aiport, during security check,
	if there is only 1 gate, then multiple passengers should follow queue
	if there are 4 gates and there are 4 passengers, nobody will stand in the queue

suppose there are 2 threads, accessing 2 objects, there is no need for synchronization.
suppose there are 2 threads, accessing 1 object, then we need to do synchronization


class Employee
{
	
	public void display() throws InterruptedException
	{
		System.out.println(Thread.currentThread().getName()+"Entering the displaymethod");
		synchronized (this) {
			for(int i=0;i<30;i++)
			{
				System.out.println(Thread.currentThread().getName()+" : "+i);
				Thread.sleep(1000);
			}
			System.out.println(Thread.currentThread().getName()+"Exiting the synchronized block now");
		}
		
	}
}

class MyThread extends Thread
{
	Employee employee;
	
	public MyThread() {}
	public MyThread(Employee employee) {
		super();
		this.employee = employee;
	}
	public Employee getEmployee() {
		return employee;
	}
	public void setEmployee(Employee employee) {
		this.employee = employee;
	}
	
	public void run()
	{
		try {
			employee.display();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}

public class App9_Syncblock {

	public static void main(String[] args) {
		MyThread t1=new MyThread();
		MyThread t2=new MyThread();
		Employee rama=new Employee();
		
		t1.setEmployee(rama);
		t2.setEmployee(rama);
		
		t1.setName("Thread 1");
		t2.setName("THread TWO");
		
		t1.start();
		t2.start();
	}

}




=========================
synchronized method
	once a thread enters this method, other threads are not allowed to enter this method

	in StringBuffer, every method that is used to affect the string is synchronized
----------------------------------------------------------



IN (A,B,C,D,E)

=ANY

>=ALL
<=ALL

NOT IN


Subqueries are used to find a result and use that result as a value for outer query

usually sub queries are executed first and then their result is supplied to outer query

But "correlated" subqueries work together with the outer because, the sub query depends on the outer query

select * from departments d
where not exists
(select * from employees e where e.department_id=d.department_id);



DDL	
	CREATE, ALTER, DROP, TRUNCATE
DML
	INSERT, UPDATE, DELETE, MERGE
DQL
	SELECT
DCL
	GRANT, REVOKE
TCL
	COMMIT, ROLLBACK, SAVEPOINT







RAW		unstructured data
LONG
CLOB
BLOB
BFILE



